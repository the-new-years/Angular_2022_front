{"ast":null,"code":"import { forkJoin, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Assignment } from '../assignments/assignment.model';\nimport { assignmentsGeneres } from './data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./logging.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./auth.service\";\nexport let AssignmentsService = /*#__PURE__*/(() => {\n  class AssignmentsService {\n    constructor(loggingService, http, authService) {\n      this.loggingService = loggingService;\n      this.http = http;\n      this.authService = authService;\n      this.uri = \"http://localhost:8010/api/assignments\";\n      this.uriRenduOui = \"http://localhost:8010/api/assignmentsRenduTrue\";\n      this.uriRenduNon = \"http://localhost:8010/api/assignmentsRenduFalse\";\n    } //uri = \"https://mbdsangularback.herokuapp.com/api/assignments\"\n    //uriRenduOui = \"https://mbdsangularback.herokuapp.com/api/assignmentsRenduTrue\"\n    //uriRenduNon = \"https://mbdsangularback.herokuapp.com/api/assignmentsRenduFalse\"\n\n\n    getAssignments() {\n      console.log(\"Dans le service de gestion des assignments...\"); //return of(this.assignments);\n\n      return this.http.get(this.uri);\n    }\n\n    getAssignmentsPagine(page, limit) {\n      return this.http.get(this.uri + \"?page=\" + page + \"&limit=\" + limit);\n    }\n\n    getAssignmentsRenduOui(rendu, page, limit) {\n      console.log(\"Dans le service de rendu ...\" + rendu);\n      return this.http.get(this.uriRenduOui + \"/rendu=\" + rendu + \"?page=\" + page + \"&limit=\" + limit);\n    }\n\n    getAssignmentsRenduNon(rendu, page, limit) {\n      console.log(\"Dans le service de rendu ...\" + rendu);\n      return this.http.get(this.uriRenduNon + \"/rendu=\" + rendu + \"?page=\" + page + \"&limit=\" + limit);\n    } // Pour votre culture, on peut aussi utiliser httpClient avec une promesse\n    // et then, async, await etc. Mais ce n'est pas la norme chez les developpeurs\n    // Angular\n\n\n    getAssignmentsAsPromise() {\n      console.log(\"Dans le service de gestion des assignments...\"); //return of(this.assignments);\n\n      return this.http.get(this.uri).toPromise();\n    }\n\n    getAssignment(id) {\n      //let assignementCherche = this.assignments.find(a => a.id === id);\n      //return of(assignementCherche);\n      return this.http.get(this.uri + \"/\" + id).pipe( // traitement 1\n      map(a => {\n        //a.nom += \" MODIFIE PAR MAP\";\n        return a;\n      }), tap(a => {\n        console.log(\"TRACE DANS TAP : j'ai reçu \" + a.nom);\n      }),\n      /*\n      filter(a => {\n        return (a.rendu)\n      })\n      */\n      catchError(this.handleError('### catchError: getAssignments by id avec id=' + id)));\n    }\n\n    getAssignmentNonRendu(id) {\n      //let assignementCherche = this.assignments.find(a => a.id === id);\n      //return of(assignementCherche);\n      return this.http.get(this.uri + \"/\" + id).pipe( // traitement 1\n      map(a => {\n        //a.nom += \" MODIFIE PAR MAP\";\n        return a;\n      }), tap(a => {\n        console.log(\"TRACE DANS TAP : j'ai reçu \" + a.nom);\n      }),\n      /*\n      filter(a => {\n        return (a.rendu)\n      })\n      */\n      catchError(this.handleError('### catchError: getAssignments by id avec id=' + id)));\n    }\n\n    handleError(operation, result) {\n      return error => {\n        console.log(error); // pour afficher dans la console\n\n        console.log(operation + ' a échoué ' + error.message);\n        return of(result);\n      };\n    }\n\n    generateId() {\n      return Math.round(Math.random() * 100000);\n    }\n\n    addAssignment(assignment) {\n      assignment.id = this.generateId(); //this.loggingService.log(assignment.nom, \" a été ajouté\");\n\n      /*this.assignments.push(assignment);\n       \n      return of(\"Service: assignment ajouté !\");*/\n\n      return this.http.post(this.uri, assignment);\n    }\n\n    updateAssignment(assignment) {\n      // besoin de ne rien faire puisque l'assignment passé en paramètre\n      // est déjà un élément du tableau\n      //let index = this.assignments.indexOf(assignment);\n      //console.log(\"updateAssignment l'assignment passé en param est à la position \" + index + \" du tableau\");\n      this.loggingService.log(assignment.nom, \" a été modifié\");\n      return this.http.put(this.uri, assignment);\n    }\n\n    deleteAssignment(assignment) {\n      /*\n      let index = this.assignments.indexOf(assignment);\n           this.assignments.splice(index, 1);\n      */\n      this.loggingService.log(assignment.nom, \" a été supprimé\");\n      return this.http.delete(this.uri + \"/\" + assignment._id);\n    }\n\n    peuplerBD() {\n      assignmentsGeneres.forEach(a => {\n        let nouvelAssignment = new Assignment();\n        nouvelAssignment.nom = a.nom;\n        nouvelAssignment.id = a.id;\n        nouvelAssignment.dateDeRendu = new Date(a.dateDeRendu);\n        nouvelAssignment.rendu = a.rendu;\n        this.addAssignment(nouvelAssignment).subscribe(reponse => {\n          console.log(reponse.message);\n        });\n      });\n    } // autre version qui permet de récupérer un subscribe une fois que tous les inserts\n    // ont été effectués\n\n\n    peuplerBDAvecForkJoin() {\n      const appelsVersAddAssignment = [];\n      assignmentsGeneres.forEach(a => {\n        const nouvelAssignment = new Assignment();\n        nouvelAssignment.id = a.id;\n        nouvelAssignment.nom = a.nom;\n        nouvelAssignment.dateDeRendu = new Date(a.dateDeRendu);\n        nouvelAssignment.rendu = a.rendu;\n        appelsVersAddAssignment.push(this.addAssignment(nouvelAssignment));\n      });\n      return forkJoin(appelsVersAddAssignment); // renvoie un seul Observable pour dire que c'est fini\n    }\n\n  }\n\n  AssignmentsService.ɵfac = function AssignmentsService_Factory(t) {\n    return new (t || AssignmentsService)(i0.ɵɵinject(i1.LoggingService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthService));\n  };\n\n  AssignmentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AssignmentsService,\n    factory: AssignmentsService.ɵfac,\n    providedIn: 'root'\n  });\n  return AssignmentsService;\n})();","map":null,"metadata":{},"sourceType":"module"}